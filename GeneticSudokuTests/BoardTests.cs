using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace GeneticSudokuTests
{
    using GeneticSudoku;

    [TestClass]
    public class BoardTests
    {
        [TestMethod]
        public void Perfect_board_has_no_violations()
        {
            var d = new int[9, 9];
            d[0, 0] = 6;
            d[0, 1] = 4;
            d[0, 2] = 5;
            d[0, 3] = 8;
            d[0, 4] = 7;
            d[0, 5] = 2;
            d[0, 6] = 9;
            d[0, 7] = 1;
            d[0, 8] = 3;
            d[1, 0] = 3;
            d[1, 1] = 8;
            d[1, 2] = 1;
            d[1, 3] = 6;
            d[1, 4] = 5;
            d[1, 5] = 9;
            d[1, 6] = 4;
            d[1, 7] = 7;
            d[1, 8] = 2;
            d[2, 0] = 2;
            d[2, 1] = 7;
            d[2, 2] = 9;
            d[2, 3] = 4;
            d[2, 4] = 1;
            d[2, 5] = 3;
            d[2, 6] = 5;
            d[2, 7] = 6;
            d[2, 8] = 8;
            d[3, 0] = 7;
            d[3, 1] = 5;
            d[3, 2] = 2;
            d[3, 3] = 3;
            d[3, 4] = 9;
            d[3, 5] = 1;
            d[3, 6] = 6;
            d[3, 7] = 8;
            d[3, 8] = 4;
            d[4, 0] = 8;
            d[4, 1] = 9;
            d[4, 2] = 4;
            d[4, 3] = 5;
            d[4, 4] = 6;
            d[4, 5] = 7;
            d[4, 6] = 3;
            d[4, 7] = 2;
            d[4, 8] = 1;
            d[5, 0] = 1;
            d[5, 1] = 6;
            d[5, 2] = 3;
            d[5, 3] = 2;
            d[5, 4] = 8;
            d[5, 5] = 4;
            d[5, 6] = 7;
            d[5, 7] = 5;
            d[5, 8] = 9;
            d[6, 0] = 9;
            d[6, 1] = 2;
            d[6, 2] = 8;
            d[6, 3] = 7;
            d[6, 4] = 3;
            d[6, 5] = 6;
            d[6, 6] = 1;
            d[6, 7] = 4;
            d[6, 8] = 5;
            d[7, 0] = 4;
            d[7, 1] = 1;
            d[7, 2] = 7;
            d[7, 3] = 9;
            d[7, 4] = 2;
            d[7, 5] = 5;
            d[7, 6] = 8;
            d[7, 7] = 3;
            d[7, 8] = 6;
            d[8, 0] = 5;
            d[8, 1] = 3;
            d[8, 2] = 6;
            d[8, 3] = 1;
            d[8, 4] = 4;
            d[8, 5] = 8;
            d[8, 6] = 2;
            d[8, 7] = 9;
            d[8, 8] = 7;

            var board = new Board(d);
            Assert.AreEqual(0, board.Violations());
        }

        [TestMethod]
        public void Awful_board_has_27_violations()
        {
            var d = new int[9, 9];
            d[0, 0] = 1;
            d[0, 1] = 1;
            d[0, 2] = 1;
            d[0, 3] = 1;
            d[0, 4] = 1;
            d[0, 5] = 1;
            d[0, 6] = 1;
            d[0, 7] = 1;
            d[0, 8] = 1;
            d[1, 0] = 1;
            d[1, 1] = 1;
            d[1, 2] = 1;
            d[1, 3] = 1;
            d[1, 4] = 1;
            d[1, 5] = 1;
            d[1, 6] = 1;
            d[1, 7] = 1;
            d[1, 8] = 1;
            d[2, 0] = 1;
            d[2, 1] = 1;
            d[2, 2] = 1;
            d[2, 3] = 1;
            d[2, 4] = 1;
            d[2, 5] = 1;
            d[2, 6] = 1;
            d[2, 7] = 1;
            d[2, 8] = 1;
            d[3, 0] = 1;
            d[3, 1] = 1;
            d[3, 2] = 1;
            d[3, 3] = 1;
            d[3, 4] = 1;
            d[3, 5] = 1;
            d[3, 6] = 1;
            d[3, 7] = 1;
            d[3, 8] = 1;
            d[4, 0] = 1;
            d[4, 1] = 1;
            d[4, 2] = 1;
            d[4, 3] = 1;
            d[4, 4] = 1;
            d[4, 5] = 1;
            d[4, 6] = 1;
            d[4, 7] = 1;
            d[4, 8] = 1;
            d[5, 0] = 1;
            d[5, 1] = 1;
            d[5, 2] = 1;
            d[5, 3] = 1;
            d[5, 4] = 1;
            d[5, 5] = 1;
            d[5, 6] = 1;
            d[5, 7] = 1;
            d[5, 8] = 1;
            d[6, 0] = 1;
            d[6, 1] = 1;
            d[6, 2] = 1;
            d[6, 3] = 1;
            d[6, 4] = 1;
            d[6, 5] = 1;
            d[6, 6] = 1;
            d[6, 7] = 1;
            d[6, 8] = 1;
            d[7, 0] = 1;
            d[7, 1] = 1;
            d[7, 2] = 1;
            d[7, 3] = 1;
            d[7, 4] = 1;
            d[7, 5] = 1;
            d[7, 6] = 1;
            d[7, 7] = 1;
            d[7, 8] = 1;
            d[8, 0] = 1;
            d[8, 1] = 1;
            d[8, 2] = 1;
            d[8, 3] = 1;
            d[8, 4] = 1;
            d[8, 5] = 1;
            d[8, 6] = 1;
            d[8, 7] = 1;
            d[8, 8] = 1;
            
            var board = new Board(d);
            Assert.AreEqual(27, board.Violations());
        }
    }
}
